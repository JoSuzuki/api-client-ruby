=begin
#LaunchDarkly REST API

#Build custom integrations with the LaunchDarkly REST API

OpenAPI spec version: 5.0.2
Contact: support@launchdarkly.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'date'

module LaunchDarklyApi
  class ApprovalRequest
    attr_accessor :_id

    attr_accessor :_version

    # A unix epoch time in milliseconds specifying the date the approval request was requested
    attr_accessor :creation_date

    # The id of the member that requested the change
    attr_accessor :requestor_id

    attr_accessor :review_status

    # | Name     | Description | | --------:| ----------- | | pending  | the approval request has not been applied yet | | completed| the approval request has been applied successfully | | failed   | the approval request has been applied but the changes were not applied successfully | 
    attr_accessor :status

    # The id of the member that applied the approval request
    attr_accessor :applied_by_member_id

    # A unix epoch time in milliseconds specifying the date the approval request was applied
    attr_accessor :applied_date

    attr_accessor :all_reviews

    attr_accessor :notify_member_ids

    attr_accessor :instructions

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_id' => :'_id',
        :'_version' => :'_version',
        :'creation_date' => :'creationDate',
        :'requestor_id' => :'requestorId',
        :'review_status' => :'reviewStatus',
        :'status' => :'status',
        :'applied_by_member_id' => :'appliedByMemberID',
        :'applied_date' => :'appliedDate',
        :'all_reviews' => :'allReviews',
        :'notify_member_ids' => :'notifyMemberIds',
        :'instructions' => :'instructions'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'_id' => :'Id',
        :'_version' => :'Integer',
        :'creation_date' => :'Integer',
        :'requestor_id' => :'String',
        :'review_status' => :'ApprovalRequestReviewStatus',
        :'status' => :'String',
        :'applied_by_member_id' => :'String',
        :'applied_date' => :'Integer',
        :'all_reviews' => :'Array<ApprovalRequestReview>',
        :'notify_member_ids' => :'Array<String>',
        :'instructions' => :'SemanticPatchInstruction'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'_id')
        self._id = attributes[:'_id']
      end

      if attributes.has_key?(:'_version')
        self._version = attributes[:'_version']
      end

      if attributes.has_key?(:'creationDate')
        self.creation_date = attributes[:'creationDate']
      end

      if attributes.has_key?(:'requestorId')
        self.requestor_id = attributes[:'requestorId']
      end

      if attributes.has_key?(:'reviewStatus')
        self.review_status = attributes[:'reviewStatus']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'appliedByMemberID')
        self.applied_by_member_id = attributes[:'appliedByMemberID']
      end

      if attributes.has_key?(:'appliedDate')
        self.applied_date = attributes[:'appliedDate']
      end

      if attributes.has_key?(:'allReviews')
        if (value = attributes[:'allReviews']).is_a?(Array)
          self.all_reviews = value
        end
      end

      if attributes.has_key?(:'notifyMemberIds')
        if (value = attributes[:'notifyMemberIds']).is_a?(Array)
          self.notify_member_ids = value
        end
      end

      if attributes.has_key?(:'instructions')
        self.instructions = attributes[:'instructions']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      status_validator = EnumAttributeValidator.new('String', ['pending', 'completed', 'failed'])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ['pending', 'completed', 'failed'])
      unless validator.valid?(status)
        fail ArgumentError, 'invalid value for "status", must be one of #{validator.allowable_values}.'
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _id == o._id &&
          _version == o._version &&
          creation_date == o.creation_date &&
          requestor_id == o.requestor_id &&
          review_status == o.review_status &&
          status == o.status &&
          applied_by_member_id == o.applied_by_member_id &&
          applied_date == o.applied_date &&
          all_reviews == o.all_reviews &&
          notify_member_ids == o.notify_member_ids &&
          instructions == o.instructions
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [_id, _version, creation_date, requestor_id, review_status, status, applied_by_member_id, applied_date, all_reviews, notify_member_ids, instructions].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = LaunchDarklyApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
